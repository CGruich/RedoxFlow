Task:
Write a function that:
For any given reactant A generated by the LLM, find a set of likely reduced candidates B based on functional group rules/organic chemistry reasoning.

Emphasis on making sure the rules are (1) reliable for large-scale molecule generation, (2) inexpensive.

Inputs:
SMILEs representation for Reactant A

Outputs:
A list of SMILEs representations for all reduced product B candidates.

Suggestions:
	- Use SMARTS to define reaction rules and determine candidates B from A
	- Demonstrate that the concept works in a loop first, then we can consider making it faster with NumPy vectorization
	- Use RDKit
	- Consider that a reduced product B can also itself be reduced further (recursive reduction checking of candidates)
		- e.g., A -> B based on rules but then check if B -> C and even if C -> D. If so, add to list of reduced candidates returned in the output
	- Even after writing a rigorous procedure, return None if a molecule is unable to be reduced to keep track of molecules that fail in the pipeline.

Members:
Maurycy

Deliverable:
Jupyter notebook demonstration of function within the same folder
